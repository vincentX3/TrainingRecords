# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\ui\settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QHeaderView, QAbstractItemView, QTableWidgetItem, QDialog, QGroupBox, QLabel, QPushButton, \
    QVBoxLayout, QHBoxLayout, QLineEdit, QFileDialog, QMessageBox

from src.DbOps import DbOps
from ui_macro import *


class Ui_settings(object):
    def setupUi(self, settings):
        settings.setObjectName("settings")
        settings.resize(PAGE_WIDTH, HEIGHT)
        self.verticalLayout = QtWidgets.QVBoxLayout(settings)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(settings)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setObjectName("tabWidget")

        self.tab_default = QtWidgets.QWidget()
        self.tab_default.setObjectName("tab_default")

        # self.widget = QtWidgets.QWidget(self.tab_default)
        # self.widget.setGeometry(QtCore.QRect(80, 80, 736, 88))
        # self.widget.setObjectName("widget")
        self.verticalLayout1 = QtWidgets.QVBoxLayout(self.tab_default)
        self.verticalLayout1.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout1.setObjectName("verticalLayout1")

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_cur_db = QtWidgets.QLabel(self.tab_default)
        self.label_cur_db.setObjectName("label_cur_db")
        self.horizontalLayout.addWidget(self.label_cur_db)
        self.label_cur_db_path = QtWidgets.QLabel(self.tab_default)
        self.label_cur_db_path.setObjectName("label_cur_db_path")
        self.horizontalLayout.addWidget(self.label_cur_db_path)
        self.horizontalLayout.addStretch(1)

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_import_db = QtWidgets.QLabel(self.tab_default)
        self.label_import_db.setObjectName("label_import_db")
        self.horizontalLayout_2.addWidget(self.label_import_db)
        self.lineEdit_import_db_path = QtWidgets.QLineEdit(self.tab_default)
        self.lineEdit_import_db_path.setObjectName("lineEdit_import_db_path")
        self.horizontalLayout_2.addWidget(self.lineEdit_import_db_path)
        self.pushButton_view = QtWidgets.QPushButton(self.tab_default)
        self.pushButton_view.setObjectName("pushButton_view")
        self.horizontalLayout_2.addWidget(self.pushButton_view)
        self.pushButton_import = QtWidgets.QPushButton(self.tab_default)
        self.pushButton_import.setObjectName("pushButton_import")
        self.horizontalLayout_2.addWidget(self.pushButton_import)

        self.verticalLayout1.addLayout(self.horizontalLayout)
        self.verticalLayout1.addLayout(self.horizontalLayout_2)
        self.verticalLayout1.addStretch(1)

        self.tabWidget.addTab(self.tab_default, "")

        self.tab_actionbase = QtWidgets.QWidget()
        self.tab_actionbase.setObjectName("tab_actionbase")
        self.gridLayout = QtWidgets.QGridLayout(self.tab_actionbase)
        # self.widget = QtWidgets.QWidget(self.tab_actionbase)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.tableWidget_actionbase = QtWidgets.QTableWidget(self.tab_actionbase)
        self.tableWidget_actionbase.setObjectName("tableWidget_actionbase")
        self.tableWidget_actionbase.setColumnCount(0)
        self.tableWidget_actionbase.setRowCount(0)
        self.gridLayout.addWidget(self.tableWidget_actionbase, 0, 0, 1, 6)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 4, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 1, 1, 1)
        self.pushButton_update = QtWidgets.QPushButton(self.tableWidget_actionbase)
        self.pushButton_update.setObjectName("pushButton_update")
        self.gridLayout.addWidget(self.pushButton_update, 1, 2, 1, 1)
        self.pushButton_delete = QtWidgets.QPushButton(self.tableWidget_actionbase)
        self.pushButton_delete.setObjectName("pushButton_delete")
        self.gridLayout.addWidget(self.pushButton_delete, 1, 3, 1, 1)
        self.tabWidget.addTab(self.tab_actionbase, "")

        self.verticalLayout.addWidget(self.tabWidget)

        self.retranslateUi(settings)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(settings)

        self.init_all()

    def retranslateUi(self, settings):
        _translate = QtCore.QCoreApplication.translate
        settings.setWindowTitle(_translate("settings", "Form"))
        self.label_cur_db.setText(_translate("settings", "当前DB路径："))
        self.label_cur_db_path.setText(_translate("settings", "/"))
        self.label_import_db.setText(_translate("settings", "选择导入DB："))
        self.pushButton_view.setText(_translate("settings", "浏览"))
        self.pushButton_import.setText(_translate("settings", "导入"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_default), _translate("settings", "设置"))
        self.pushButton_update.setText(_translate("settings", "update"))
        self.pushButton_delete.setText(_translate("settings", "delete"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_actionbase), _translate("settings", "动作库"))

    def init_all(self):
        # initialize UI and build up connection

        self.label_cur_db_path.setText(DB_PATH)

        # --- init table ---
        self.init_action_table()

        # --- init connection ---
        self.pushButton_view.clicked.connect(self.choose_old_db)
        self.pushButton_import.clicked.connect(self.import_db)
        self.pushButton_delete.clicked.connect(self.delete_action_table)
        self.pushButton_update.clicked.connect(self.update_action_table)
        self.tabWidget.tabBarClicked['int'].connect(self.refresh_by_tab_click)

    def init_action_table(self):
        self.tableWidget_actionbase.setColumnCount(3)
        self.tableWidget_actionbase.horizontalHeader().setStretchLastSection(True)
        self.tableWidget_actionbase.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        header_labels = ['动作', '难度', '部位']
        self.tableWidget_actionbase.setHorizontalHeaderLabels(header_labels)
        self.tableWidget_actionbase.setEditTriggers(self.tableWidget_actionbase.NoEditTriggers)
        # 不显示单元格
        self.tableWidget_actionbase.setShowGrid(False)
        # 设置表格选择行为为 只能一行一行选择
        self.tableWidget_actionbase.setSelectionBehavior(QAbstractItemView.SelectRows)

        self.flush_action_table()

    def flush_action_table(self):
        data = DbOps.fetch_actions()
        # 设置表格的行数，和数据的数量相关
        self.tableWidget_actionbase.setRowCount(len(data))
        # 设置表格的数据
        for idx, item in enumerate(data):
            for i, word in enumerate(item):
                self.tableWidget_actionbase.setItem(idx, i, QTableWidgetItem(str(word)))

    def delete_action_table(self):
        selected_row = self.tableWidget_actionbase.selectedItems()
        if len(selected_row) > 0:  # selected a row
            del_row = self.tableWidget_actionbase.row(selected_row[0])
            aname = self.tableWidget_actionbase.item(del_row, 0).text()
            alevel = self.tableWidget_actionbase.item(del_row, 1).text()
            # pop up confirm dialog
            if self.delete_dialog() == True:
                DbOps.delete_action(aname, alevel)
                self.flush_action_table()

    def update_action_table(self):
        selected_row = self.tableWidget_actionbase.selectedItems()
        if len(selected_row) > 0:  # selected a row
            edit_row = self.tableWidget_actionbase.row(selected_row[0])
            name = self.tableWidget_actionbase.item(edit_row, 0).text()
            level = self.tableWidget_actionbase.item(edit_row, 1).text()
            part = self.tableWidget_actionbase.item(edit_row, 2).text()
            # call dialog
            self.update_dialog(name, level, part)
            self.flush_action_table()

    def refresh_by_tab_click(self, idx):
        if idx == 1:
            self.flush_action_table()

    def update_action(self):
        DbOps.update_action(self.ori_name, self.ori_level, self.ed_name.text(), self.ed_level.text(),
                            self.ed_part.text())

    def choose_old_db(self):
        old_db_path, filetype = QFileDialog.getOpenFileName(self,
                                                            "选取文件",
                                                            os.path.abspath(os.path.join(os.getcwd(), "..")),  # 起始路径
                                                            "SQLite DB (*.db);;All Files (*)")  # 设置文件扩展名过滤,用双分号间隔
        if len(old_db_path) > 0 and old_db_path[-2:] == 'db':
            self.lineEdit_import_db_path.setText(old_db_path)

    def import_db(self):
        if self.custom_alert_dialog(u'Import', u'确认导入旧数据库？'):
            print(">>> import from old db:", self.lineEdit_import_db_path.text())
            try:
                DbOps.import_old_db(self.lineEdit_import_db_path.text())
            except Exception as e:
                print(e)
                return
            QMessageBox.about(self, "Import", "导入成功!")

    def update_dialog(self, name, level, part):
        dialog = QDialog(self)
        dialog.setWindowTitle('Update')
        dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)

        # 创建一个group盒子
        group = QGroupBox(dialog)

        # bind id for update-SQL
        self.ori_name = name
        self.ori_level = level

        # 标签和输入框
        lb1 = QLabel('动作:', group)
        self.ed_name = QLineEdit(group)
        self.ed_name.setText(name)
        lb2 = QLabel('难度:', group)
        self.ed_level = QLineEdit(group)
        self.ed_level.setText(level)
        lb3 = QLabel('部位:', group)
        self.ed_part = QLineEdit(group)
        self.ed_part.setText(part)

        # 创建确定和取消的按钮
        ok_button = QPushButton('yes', dialog)
        cancel_button = QPushButton('cancel', dialog)

        # 创建一个垂直布局，将标签和按钮控件都添加到垂直布局里
        group_layout = QVBoxLayout()
        group_item = [lb1, self.ed_name, lb2, self.ed_level, lb3, self.ed_part]
        for item in group_item:
            group_layout.addWidget(item)

        # 将垂直布局添加到groupbox中
        group.setLayout(group_layout)
        group.setFixedSize(group.sizeHint())

        # 创建一个水平布局，并将两个按钮添加到布局中
        button_layout = QHBoxLayout()
        button_layout.addWidget(ok_button)
        button_layout.addWidget(cancel_button)

        # 创建一个最外层的dialog垂直布局，将盒子和按钮布局加到这个布局中
        dialog_layout = QVBoxLayout()
        dialog_layout.addWidget(group)
        dialog_layout.addLayout(button_layout)

        # 设置这个对话框的布局
        dialog.setLayout(dialog_layout)
        dialog.setFixedSize(dialog.sizeHint())

        ok_button.clicked.connect(self.update_action)
        ok_button.clicked.connect(dialog.accept)

        # 默认选中ok按钮
        ok_button.setDefault(True)

        dialog.exec_()
        return False

    def custom_alert_dialog(self, title, content):
        dialog = QDialog(self)
        dialog.setWindowTitle(title)
        dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        group = QGroupBox('', dialog)
        lb1 = QLabel(content)

        ok_button = QPushButton(u'yes', dialog)
        cancel_button = QPushButton(u'cancel', dialog)

        ok_button.clicked.connect(dialog.accept)
        ok_button.setDefault(True)
        cancel_button.clicked.connect(dialog.reject)
        group_layout = QVBoxLayout()
        group_item = [lb1]
        for item in group_item:
            group_layout.addWidget(item)
        group.setLayout(group_layout)
        group.setFixedSize(group.sizeHint())

        button_layout = QHBoxLayout()
        button_layout.addWidget(ok_button)
        button_layout.addWidget(cancel_button)
        dialog_layout = QVBoxLayout()
        dialog_layout.addWidget(group)
        dialog_layout.addLayout(button_layout)
        dialog.setLayout(dialog_layout)
        dialog.setFixedSize(dialog.sizeHint())

        # 当点击ok是，表示确定删除返回True
        if dialog.exec_():
            return True
        # 否则返回False
        return False

    def delete_dialog(self):
        return self.custom_alert_dialog(u'Delete', u'确认删除动作吗?\n相关记录也会一并删除!')
